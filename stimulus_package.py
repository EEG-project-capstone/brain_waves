## Jacob Cavon, Anika Gupta, Arielle Hancko, Roni Weissman, 2024##
## Stimulus package for EEG patients##

# Import packages
from gtts import gTTS
import json
import os
from psychopy import sound, core
import psychtoolbox as ptb
import random
import time


#######
# Define and generate lists of words
#######

def generate_and_play_sentences(num_sentences=4, patient_id="patient0",
                                noun_list_path="noun_list.txt", adj_list_path="adj_list.txt",
                                verb_list_path="verb_list.txt"):
    """
    Generates random sentences in the form NOUN is ADJECTIVE and VERB by 
    randomly selecting words from the noun, adjective, and verb word lists.
    Each generated sentence is then turned into an audio and played out 
    loud. There is a 5 second pause in between audio plays of each sentence.

    Parameters:
    - patient_id (str): patient id number, or eeg id number, to identify 
    who/what eeg the stimulus is being administered to
    - num_sentences (int): number of sentences you want to generate and play
    - noun, adj, and verb words: lists of words that the function takes to
    randomly generate sentences. By default they are set to the _list.txt
    word files in the root directory.

    Returns:
    - patient_id (str)
    - administered_sentences_dictionary: a dictionary of sentences that 
    were generated and audio played, where each key of the dictionary is a 
    Python global timestamp of when the sentence audio was played, and each 
    value is a string of the sentence played.
    """

    # Define lists of words (modify these with your desired words, could even modify this function to take in lists
    # of words as arguments)

    with open(noun_list_path, "r") as noun_file:
        noun_list = [word.strip()
                     for line in noun_file for word in line.split(',')]

    with open(adj_list_path, "r") as adj_file:
        adj_list = [word.strip()
                    for line in adj_file for word in line.split(',')]

    with open(verb_list_path, "r") as verb_file:
        verb_list = [word.strip()
                     for line in verb_file for word in line.split(',')]

    # Initialize an empty dictionary
    administered_sentences_dict = {}

    sentence_count = 0

    while sentence_count < num_sentences:
        # Generate random sentence, date, and timestamp
        noun = random.choice(noun_list)
        adj = random.choice(adj_list)
        verb = random.choice(verb_list)
        sentence = f"{noun} is {adj} and {verb}"

        # Capture sentence timestamp and update dictionary with administered sentence
        current_timestamp = time.time()
        administered_sentences_dict[current_timestamp] = sentence

        # initialize the google text to speech object
        tts = gTTS(text=sentence, lang="en")
        tts.save("temp.mp3")

        # Play audio
        sentence_sound = sound.Sound("temp.mp3")
        now = ptb.GetSecs()
        sound.Sound.play(sentence_sound, when=now)
        print(sentence)

        # Wait for 5 seconds before looping again
        core.wait(5)

        # Increment the sentence count
        sentence_count += 1

        # delete the intermediate mp3 file
        os.remove("temp.mp3")

    # Return patient ID, current date, and the updated dictionary
    return patient_id, administered_sentences_dict


#######
# Update global patient dictionary
#######

def update_patient_dict(patient_id, administered_sentences_dict):
    """
    Updates the global patient dictionary with strings of the sentences generated by the generate_and_play_sentences() function.
    Each sentence string value is paired with a global timestamp key of when the sentence audio was played.

    Parameters:
    - patient_id (str)
    - administered sentences_dict (dict): The timestamped sentences dictionary returned by generate_and_play_sentences() function.

    Returns:
    Updates the global patient_dict with the Python current date and the timestamped sentences administered from generate_and_play_sentences()
    """

    current_date = time.strftime("%Y-%m-%d")

    with open("patient_dict.json", 'r') as dictionary_file:
        try:
            patient_dict = json.load(dictionary_file)
        except json.decoder.JSONDecodeError:
            patient_dict = {}

    # Check if patient_id is already in the dictionary
    if patient_id not in patient_dict:
        patient_dict[patient_id] = {}

    # Check if current_date is already in the inner dictionary
    if current_date not in patient_dict[patient_id]:
        patient_dict[patient_id][current_date] = {}
    else:
        print("Patient has already been administered stimulus protocol today")
        return

    # Update the patient dictionary with sentences_dict
    patient_dict[patient_id][current_date].update(administered_sentences_dict)

    with open("patient_dict.json", 'w') as dictionary_file:
        json.dump(patient_dict, dictionary_file)
        print(patient_dict)
        print("Successfully saved stimulus protocol record to patient_dict")
